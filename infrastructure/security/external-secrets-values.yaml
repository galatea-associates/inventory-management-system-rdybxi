# Helm values for External Secrets Operator
# Helm version: v3
# External Secrets Operator version: 0.8.1

# Install Custom Resource Definitions alongside the Helm chart
installCRDs: true

# Number of operator replicas
replicaCount: 2

# Image configuration
image:
  repository: ghcr.io/external-secrets/external-secrets
  tag: v0.8.1
  pullPolicy: IfNotPresent

# Service account configuration
serviceAccount:
  create: true
  name: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/ims-${ENVIRONMENT}-external-secrets-role

# Security context configuration
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Resource allocation
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 256Mi

# Prometheus metrics configuration
prometheus:
  enabled: true
  servicemonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 15s
    labels:
      release: prometheus

# Webhook configuration
webhook:
  create: true
  certManager:
    enabled: true
    issuerRef:
      name: selfsigned
      kind: ClusterIssuer
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

# Certificate controller configuration
certController:
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

# Pod annotations for metrics scraping
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: /metrics
  prometheus.io/port: "8080"

# Pod labels for service identification
podLabels:
  app.kubernetes.io/part-of: ims
  app.kubernetes.io/component: external-secrets

# Pod affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - external-secrets
        topologyKey: kubernetes.io/hostname

# Node selector and tolerations
nodeSelector: {}
tolerations: []

# Secret store configurations
secretStores:
  # Vault secret store configuration
  vault:
    enabled: true
    kind: ClusterSecretStore
    name: vault-backend
    spec:
      provider:
        vault:
          server: https://vault.ims.example.com
          path: secret
          version: v2
          auth:
            kubernetes:
              mountPath: kubernetes
              role: external-secrets
              serviceAccountRef:
                name: external-secrets
          caBundle: ${CA_BUNDLE}

  # AWS Secrets Manager configuration
  aws:
    enabled: true
    kind: ClusterSecretStore
    name: aws-secretsmanager
    spec:
      provider:
        aws:
          service: SecretsManager
          region: ${AWS_REGION}
          auth:
            jwt:
              serviceAccountRef:
                name: external-secrets

# External Secrets configurations
externalSecrets:
  # Common secrets for all services
  common:
    enabled: true
    name: common-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: common-secrets
      creationPolicy: Owner
    data:
      - secretKey: JWT_SECRET
        remoteRef:
          key: ims-secrets/common
          property: jwt-secret
      - secretKey: ENCRYPTION_KEY
        remoteRef:
          key: ims-secrets/common
          property: encryption-key

  # Data ingestion service secrets
  dataIngestion:
    enabled: true
    name: data-ingestion-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: data-ingestion-secrets
      creationPolicy: Owner
    data:
      - secretKey: DB_PASSWORD
        remoteRef:
          key: ims-secrets/data-ingestion
          property: db-password
      - secretKey: REUTERS_API_KEY
        remoteRef:
          key: ims-secrets/data-ingestion
          property: reuters-api-key
      - secretKey: REUTERS_API_SECRET
        remoteRef:
          key: ims-secrets/data-ingestion
          property: reuters-api-secret
      - secretKey: BLOOMBERG_API_KEY
        remoteRef:
          key: ims-secrets/data-ingestion
          property: bloomberg-api-key
      - secretKey: BLOOMBERG_API_SECRET
        remoteRef:
          key: ims-secrets/data-ingestion
          property: bloomberg-api-secret
      - secretKey: MARKIT_API_KEY
        remoteRef:
          key: ims-secrets/data-ingestion
          property: markit-api-key
      - secretKey: MARKIT_API_SECRET
        remoteRef:
          key: ims-secrets/data-ingestion
          property: markit-api-secret
      - secretKey: ULTUMUS_API_KEY
        remoteRef:
          key: ims-secrets/data-ingestion
          property: ultumus-api-key
      - secretKey: ULTUMUS_API_SECRET
        remoteRef:
          key: ims-secrets/data-ingestion
          property: ultumus-api-secret
      - secretKey: RIMES_API_KEY
        remoteRef:
          key: ims-secrets/data-ingestion
          property: rimes-api-key
      - secretKey: RIMES_API_SECRET
        remoteRef:
          key: ims-secrets/data-ingestion
          property: rimes-api-secret

  # Calculation service secrets
  calculation:
    enabled: true
    name: calculation-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: calculation-secrets
      creationPolicy: Owner
    data:
      - secretKey: DB_PASSWORD
        remoteRef:
          key: ims-secrets/calculation
          property: db-password
      - secretKey: HAZELCAST_CLUSTER_PASSWORD
        remoteRef:
          key: ims-secrets/calculation
          property: hazelcast-cluster-password
      - secretKey: REDIS_PASSWORD
        remoteRef:
          key: ims-secrets/calculation
          property: redis-password

  # Workflow service secrets
  workflow:
    enabled: true
    name: workflow-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: workflow-secrets
      creationPolicy: Owner
    data:
      - secretKey: DB_PASSWORD
        remoteRef:
          key: ims-secrets/workflow
          property: db-password
      - secretKey: CAMUNDA_ADMIN_PASSWORD
        remoteRef:
          key: ims-secrets/workflow
          property: camunda-admin-password
      - secretKey: NOTIFICATION_SERVICE_API_KEY
        remoteRef:
          key: ims-secrets/workflow
          property: notification-service-api-key

  # API Gateway secrets
  apiGateway:
    enabled: true
    name: api-gateway-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: api-gateway-secrets
      creationPolicy: Owner
    data:
      - secretKey: RATE_LIMIT_REDIS_PASSWORD
        remoteRef:
          key: ims-secrets/api-gateway
          property: rate-limit-redis-password

  # WebSocket service secrets
  websocket:
    enabled: true
    name: websocket-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: websocket-secrets
      creationPolicy: Owner
    data:
      - secretKey: REDIS_PASSWORD
        remoteRef:
          key: ims-secrets/websocket
          property: redis-password

  # Monitoring service secrets
  monitoring:
    enabled: true
    name: monitoring-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: monitoring-secrets
      creationPolicy: Owner
    data:
      - secretKey: ALERT_SMTP_PASSWORD
        remoteRef:
          key: ims-secrets/monitoring
          property: alert-smtp-password
      - secretKey: PAGERDUTY_API_KEY
        remoteRef:
          key: ims-secrets/monitoring
          property: pagerduty-api-key
      - secretKey: SLACK_WEBHOOK_URL
        remoteRef:
          key: ims-secrets/monitoring
          property: slack-webhook-url

  # Auth service secrets
  auth:
    enabled: true
    name: auth-secrets
    namespace: ims
    refreshInterval: 1h
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      name: auth-secrets
      creationPolicy: Owner
    data:
      - secretKey: DB_PASSWORD
        remoteRef:
          key: ims-secrets/auth
          property: db-password
      - secretKey: AUTH_OAUTH2_PROVIDER_OKTA_CLIENT_SECRET
        remoteRef:
          key: ims-secrets/auth
          property: auth-oauth2-provider-okta-client-secret
      - secretKey: AUTH_SMS_PROVIDER_API_KEY
        remoteRef:
          key: ims-secrets/auth
          property: auth-sms-provider-api-key
      - secretKey: AUTH_EMAIL_PROVIDER_API_KEY
        remoteRef:
          key: ims-secrets/auth
          property: auth-email-provider-api-key

# Region-specific configurations
regional_configuration:
  description: Region-specific configurations for External Secrets Operator
  regions:
    - name: Americas
      secretStores:
        vault:
          server: https://vault-americas.ims.example.com
        aws:
          region: us-east-1
    - name: Europe
      secretStores:
        vault:
          server: https://vault-europe.ims.example.com
        aws:
          region: eu-west-1
    - name: Asia-Pacific
      secretStores:
        vault:
          server: https://vault-apac.ims.example.com
        aws:
          region: ap-northeast-1

# Security considerations
security_considerations:
  description: Security considerations for External Secrets Operator deployment
  secret_rotation: Automatic refresh of secrets based on refreshInterval
  access_control: Kubernetes RBAC and Vault role-based access control
  audit_logging: Comprehensive audit logging of all secret access
  encryption: Secrets encrypted at rest in Vault and in transit via TLS

# Monitoring configuration
monitoring_configuration:
  description: Monitoring configuration for External Secrets Operator
  prometheus_metrics:
    enabled: true
    path: /metrics
    port: 8080
  alerts:
    external_secret_sync_failure:
      severity: critical
      description: External Secret synchronization has failed
      threshold: "1"
    external_secret_store_unreachable:
      severity: critical
      description: External Secret Store is unreachable
      threshold: "1"
    external_secret_controller_down:
      severity: critical
      description: External Secrets controller is not running
      threshold: "1"