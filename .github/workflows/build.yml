name: Build and Test

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  JAVA_VERSION: 17
  NODE_VERSION: 18
  GRADLE_VERSION: 8.1
  CODE_COVERAGE_THRESHOLD: 85
  CALCULATION_COVERAGE_THRESHOLD: 100

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java, javascript

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Run backend code quality checks
        working-directory: ./src/backend
        run: ./gradlew checkstyleMain checkstyleTest spotbugsMain spotbugsTest spotlessCheck

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./src/web
        run: npm ci

      - name: Run frontend code quality checks
        working-directory: ./src/web
        run: npm run lint && npm run typecheck

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  backend-build:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build and test backend
        working-directory: ./src/backend
        run: ./gradlew build test jacocoTestReport

      - name: Verify code coverage
        working-directory: ./src/backend
        run: ./gradlew jacocoTestCoverageVerification -PminimumCoverage=${{ env.CODE_COVERAGE_THRESHOLD }} -PcalculationCoverage=${{ env.CALCULATION_COVERAGE_THRESHOLD }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: src/backend/**/build/test-results/**/*.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-reports
          path: src/backend/**/build/reports/jacoco/**

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-artifacts
          path: src/backend/**/build/libs/*.jar

  frontend-build:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: ./src/web
        run: npm ci

      - name: Run tests
        working-directory: ./src/web
        run: npm run test:ci

      - name: Build frontend
        working-directory: ./src/web
        run: npm run build

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: src/web/junit.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-reports
          path: src/web/coverage/**

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-artifacts
          path: src/web/build

  docker-build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-artifacts
          path: backend-artifacts

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-artifacts
          path: frontend-artifacts

      - name: Copy artifacts to Docker context
        run: |
          mkdir -p src/backend/build/libs && cp -r backend-artifacts/*/* src/backend/build/libs/
          mkdir -p src/web/build && cp -r frontend-artifacts/* src/web/build/

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          push: false
          tags: ims/backend:${{ github.sha }},ims/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          push: false
          tags: ims/frontend:${{ github.sha }},ims/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Basic Security Scan
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Run OWASP dependency check for backend
        working-directory: ./src/backend
        run: ./gradlew dependencyCheckAggregate

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      - name: Run npm audit for frontend
        working-directory: ./src/web
        run: npm audit --production --audit-level=high || echo 'Vulnerabilities found but continuing build'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            src/backend/build/reports/dependency-check-report.html
            src/web/npm-audit.json