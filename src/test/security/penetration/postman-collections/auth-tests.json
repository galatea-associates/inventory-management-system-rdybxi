{
  "info": {
    "name": "IMS Authentication Security Tests",
    "description": "Security penetration tests for the authentication endpoints of the Inventory Management System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication Tests",
      "description": "Tests for basic authentication functionality and security controls",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "description": "Test successful login with valid credentials",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{validUsername}}\",\n  \"password\": \"{{validPassword}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response contains access token', function() { pm.expect(pm.response.json().accessToken).to.exist; });",
            "pm.test('Response contains refresh token', function() { pm.expect(pm.response.json().refreshToken).to.exist; });",
            "pm.test('Response contains user information', function() { pm.expect(pm.response.json().user).to.exist; });",
            "// Store tokens for subsequent tests",
            "if (pm.response.json().accessToken) {",
            "    pm.environment.set('accessToken', pm.response.json().accessToken);",
            "}",
            "if (pm.response.json().refreshToken) {",
            "    pm.environment.set('refreshToken', pm.response.json().refreshToken);",
            "}"
          ]
        },
        {
          "name": "Login - Invalid Username",
          "description": "Test login failure with invalid username",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{invalidUsername}}\",\n  \"password\": \"{{validPassword}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response contains error message', function() { pm.expect(pm.response.json().error).to.exist; });",
            "pm.test('Response does not contain sensitive information', function() {",
            "    pm.expect(pm.response.text()).to.not.include('SQL');",
            "    pm.expect(pm.response.text()).to.not.include('Exception');",
            "    pm.expect(pm.response.text()).to.not.include('stack');",
            "});"
          ]
        },
        {
          "name": "Login - Invalid Password",
          "description": "Test login failure with invalid password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{validUsername}}\",\n  \"password\": \"{{invalidPassword}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response contains error message', function() { pm.expect(pm.response.json().error).to.exist; });",
            "pm.test('Response does not contain sensitive information', function() {",
            "    pm.expect(pm.response.text()).to.not.include('SQL');",
            "    pm.expect(pm.response.text()).to.not.include('Exception');",
            "    pm.expect(pm.response.text()).to.not.include('stack');",
            "});"
          ]
        },
        {
          "name": "Login - SQL Injection Attempt",
          "description": "Test login with SQL injection in username",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"' OR 1=1 --\",\n  \"password\": \"password\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response does not indicate SQL error', function() { pm.expect(pm.response.text()).to.not.include('SQL'); });",
            "pm.test('Login should fail despite injection attempt', function() { pm.expect(pm.response.json().accessToken).to.not.exist; });"
          ]
        },
        {
          "name": "Login - XSS Attempt",
          "description": "Test login with XSS payload in username",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"<script>alert(1)</script>\",\n  \"password\": \"password\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response does not reflect XSS payload', function() { pm.expect(pm.response.text()).to.not.include('<script>'); });"
          ]
        },
        {
          "name": "Login - Empty Credentials",
          "description": "Test login with empty username and password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"\",\n  \"password\": \"\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response contains validation error', function() { pm.expect(pm.response.json().error).to.exist; });"
          ]
        },
        {
          "name": "Login - Missing Fields",
          "description": "Test login with missing username and password fields",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response contains validation error', function() { pm.expect(pm.response.json().error).to.exist; });"
          ]
        },
        {
          "name": "Login - Malformed JSON",
          "description": "Test login with malformed JSON payload",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ invalid json }"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response contains error message', function() { pm.expect(pm.response.json().error).to.exist; });",
            "pm.test('Response does not expose stack trace', function() { pm.expect(pm.response.text()).to.not.include('at '); });"
          ]
        }
      ]
    },
    {
      "name": "Token Tests",
      "description": "Tests for token validation, refresh, and security",
      "item": [
        {
          "name": "Validate Token - Valid Token",
          "description": "Test token validation with a valid token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/validate-token",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{accessToken}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates token is valid', function() { pm.expect(pm.response.json().valid).to.be.true; });"
          ]
        },
        {
          "name": "Validate Token - Invalid Token",
          "description": "Test token validation with an invalid token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/validate-token",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invalid.token.string\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates token is invalid', function() { pm.expect(pm.response.json().valid).to.be.false; });"
          ]
        },
        {
          "name": "Validate Token - Tampered Token",
          "description": "Test token validation with a tampered token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/validate-token",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{accessToken}}modified\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates token is invalid', function() { pm.expect(pm.response.json().valid).to.be.false; });"
          ]
        },
        {
          "name": "Refresh Token - Valid Token",
          "description": "Test token refresh with a valid refresh token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/refresh",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response contains new access token', function() { pm.expect(pm.response.json().accessToken).to.exist; });",
            "// Update access token for subsequent tests",
            "if (pm.response.json().accessToken) {",
            "    pm.environment.set('accessToken', pm.response.json().accessToken);",
            "}"
          ]
        },
        {
          "name": "Refresh Token - Invalid Token",
          "description": "Test token refresh with an invalid refresh token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/refresh",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid.refresh.token\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response contains error message', function() { pm.expect(pm.response.json().error).to.exist; });"
          ]
        },
        {
          "name": "Logout - Valid Token",
          "description": "Test logout with a valid access token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/logout",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessToken\": \"{{accessToken}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates successful logout', function() { pm.expect(pm.response.json().message).to.include('success'); });"
          ]
        }
      ]
    },
    {
      "name": "Password Management Tests",
      "description": "Tests for password change, reset, and security policies",
      "item": [
        {
          "name": "Change Password - Valid Credentials",
          "description": "Test password change with valid current password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/change-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{validPassword}}\",\n  \"newPassword\": \"NewSecureP@ssw0rd123\",\n  \"confirmPassword\": \"NewSecureP@ssw0rd123\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates successful password change', function() { pm.expect(pm.response.json().message).to.include('success'); });"
          ]
        },
        {
          "name": "Change Password - Invalid Current Password",
          "description": "Test password change with invalid current password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/change-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"WrongPassword123\",\n  \"newPassword\": \"NewSecureP@ssw0rd123\",\n  \"confirmPassword\": \"NewSecureP@ssw0rd123\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response indicates invalid current password', function() { pm.expect(pm.response.json().error).to.include('password'); });"
          ]
        },
        {
          "name": "Change Password - Password Mismatch",
          "description": "Test password change with mismatched new passwords",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/change-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{validPassword}}\",\n  \"newPassword\": \"NewSecureP@ssw0rd123\",\n  \"confirmPassword\": \"DifferentP@ssw0rd456\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response indicates password mismatch', function() { pm.expect(pm.response.json().error).to.include('match'); });"
          ]
        },
        {
          "name": "Change Password - Weak Password",
          "description": "Test password change with weak new password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/change-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{validPassword}}\",\n  \"newPassword\": \"password\",\n  \"confirmPassword\": \"password\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response indicates weak password', function() { pm.expect(pm.response.json().error).to.include('strength'); });"
          ]
        },
        {
          "name": "Request Password Reset",
          "description": "Test password reset request",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/request-password-reset",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates reset email sent', function() { pm.expect(pm.response.json().message).to.include('sent'); });"
          ]
        },
        {
          "name": "Reset Password - Valid Token",
          "description": "Test password reset with valid token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/reset-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"valid-reset-token\",\n  \"newPassword\": \"NewSecureP@ssw0rd123\",\n  \"confirmPassword\": \"NewSecureP@ssw0rd123\"\n}"
            }
          },
          "test": [
            "// This test will likely fail as we don't have a valid reset token",
            "// It's included for completeness of the test suite",
            "pm.test('Status code should be 200 for valid token or 400 for invalid token', function() {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
            "});"
          ]
        },
        {
          "name": "Reset Password - Invalid Token",
          "description": "Test password reset with invalid token",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/reset-password",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invalid-reset-token\",\n  \"newPassword\": \"NewSecureP@ssw0rd123\",\n  \"confirmPassword\": \"NewSecureP@ssw0rd123\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response indicates invalid token', function() { pm.expect(pm.response.json().error).to.include('token'); });"
          ]
        }
      ]
    },
    {
      "name": "Multi-Factor Authentication Tests",
      "description": "Tests for MFA enablement, verification, and security",
      "item": [
        {
          "name": "Enable MFA",
          "description": "Test enabling MFA for a user",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/enable-mfa",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response contains MFA secret', function() { pm.expect(pm.response.json().secret).to.exist; });",
            "// Store MFA secret for subsequent tests",
            "if (pm.response.json().secret) {",
            "    pm.environment.set('mfaSecret', pm.response.json().secret);",
            "}"
          ]
        },
        {
          "name": "Verify MFA - Valid Code",
          "description": "Test MFA verification with valid code",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/verify-mfa",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{mfaCode}}\"\n}"
            }
          },
          "test": [
            "// This test will likely fail as we don't have a valid MFA code",
            "// It's included for completeness of the test suite",
            "pm.test('Status code should be 200 for valid code or 401 for invalid code', function() {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
            "});"
          ]
        },
        {
          "name": "Verify MFA - Invalid Code",
          "description": "Test MFA verification with invalid code",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/verify-mfa",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"123456\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response indicates invalid MFA code', function() { pm.expect(pm.response.json().error).to.include('code'); });"
          ]
        },
        {
          "name": "Login with MFA",
          "description": "Test login flow with MFA enabled",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{validUsername}}\",\n  \"password\": \"{{validPassword}}\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response indicates MFA required if enabled', function() {",
            "    if (pm.response.json().mfaRequired) {",
            "        pm.expect(pm.response.json().mfaRequired).to.be.true;",
            "        pm.expect(pm.response.json().accessToken).to.not.exist;",
            "    } else {",
            "        pm.expect(pm.response.json().accessToken).to.exist;",
            "    }",
            "});"
          ]
        },
        {
          "name": "Disable MFA",
          "description": "Test disabling MFA for a user",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/disable-mfa",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{mfaCode}}\"\n}"
            }
          },
          "test": [
            "// This test will likely fail as we don't have a valid MFA code",
            "// It's included for completeness of the test suite",
            "pm.test('Status code should be 200 for valid code or 401 for invalid code', function() {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
            "});"
          ]
        }
      ]
    },
    {
      "name": "User Management Tests",
      "description": "Tests for user registration and information retrieval",
      "item": [
        {
          "name": "Register User - Valid Data",
          "description": "Test user registration with valid data",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/register",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"SecureP@ssw0rd123\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 201', function() { pm.response.to.have.status(201); });",
            "pm.test('Response indicates successful registration', function() { pm.expect(pm.response.json().message).to.include('success'); });"
          ]
        },
        {
          "name": "Register User - Duplicate Username",
          "description": "Test user registration with duplicate username",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/register",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{validUsername}}\",\n  \"email\": \"another@example.com\",\n  \"password\": \"SecureP@ssw0rd123\",\n  \"firstName\": \"Another\",\n  \"lastName\": \"User\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response indicates duplicate username', function() { pm.expect(pm.response.json().error).to.include('username'); });"
          ]
        },
        {
          "name": "Register User - Weak Password",
          "description": "Test user registration with weak password",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/register",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"weakuser\",\n  \"email\": \"weak@example.com\",\n  \"password\": \"password\",\n  \"firstName\": \"Weak\",\n  \"lastName\": \"User\"\n}"
            }
          },
          "test": [
            "pm.test('Status code is 400', function() { pm.response.to.have.status(400); });",
            "pm.test('Response indicates weak password', function() { pm.expect(pm.response.json().error).to.include('password'); });"
          ]
        },
        {
          "name": "Get User Info",
          "description": "Test retrieving user information",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}{{apiEndpoint}}/user-info",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ]
          },
          "test": [
            "pm.test('Status code is 200', function() { pm.response.to.have.status(200); });",
            "pm.test('Response contains user information', function() { pm.expect(pm.response.json().username).to.exist; });"
          ]
        },
        {
          "name": "Get User Info - No Token",
          "description": "Test retrieving user information without token",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}{{apiEndpoint}}/user-info",
            "header": []
          },
          "test": [
            "pm.test('Status code is 401', function() { pm.response.to.have.status(401); });",
            "pm.test('Response indicates authentication required', function() { pm.expect(pm.response.json().error).to.exist; });"
          ]
        }
      ]
    },
    {
      "name": "Security Header Tests",
      "description": "Tests for security headers in API responses",
      "item": [
        {
          "name": "Check Security Headers",
          "description": "Test that responses include appropriate security headers",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}{{apiEndpoint}}/user-info",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ]
          },
          "test": [
            "pm.test('Response includes Content-Security-Policy header', function() {",
            "  pm.response.to.have.header('Content-Security-Policy');",
            "});",
            "pm.test('Response includes X-Content-Type-Options header', function() {",
            "  pm.response.to.have.header('X-Content-Type-Options');",
            "  pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.equal('nosniff');",
            "});",
            "pm.test('Response includes X-Frame-Options header', function() {",
            "  pm.response.to.have.header('X-Frame-Options');",
            "});",
            "pm.test('Response includes Strict-Transport-Security header', function() {",
            "  pm.response.to.have.header('Strict-Transport-Security');",
            "});",
            "pm.test('Response includes X-XSS-Protection header', function() {",
            "  pm.response.to.have.header('X-XSS-Protection');",
            "});"
          ]
        },
        {
          "name": "Check HTTPS Enforcement",
          "description": "Test that HTTPS is enforced for all API requests",
          "request": {
            "method": "GET",
            "url": "http://{{baseUrl}}{{apiEndpoint}}/user-info",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ]
          },
          "test": [
            "pm.test('Request should be redirected to HTTPS', function() {",
            "  pm.expect(pm.response.code).to.be.oneOf([301, 302, 307, 308]);",
            "  if ([301, 302, 307, 308].includes(pm.response.code)) {",
            "    pm.expect(pm.response.headers.get('Location')).to.include('https://');",
            "  }",
            "});"
          ]
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "description": "Tests for API rate limiting protection",
      "item": [
        {
          "name": "Check Rate Limit Headers",
          "description": "Test that responses include rate limit headers",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}{{apiEndpoint}}/user-info",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ]
          },
          "test": [
            "pm.test('Response includes rate limit headers', function() {",
            "  // Not all implementations will have these headers, so we make this test optional",
            "  const hasRateLimitHeaders = pm.response.headers.get('X-RateLimit-Limit') !== undefined;",
            "  if (hasRateLimitHeaders) {",
            "    pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.exist;",
            "    pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.exist;",
            "    pm.expect(pm.response.headers.get('X-RateLimit-Reset')).to.exist;",
            "  } else {",
            "    pm.expect(true).to.be.true; // Skip test if headers don't exist",
            "  }",
            "});"
          ]
        },
        {
          "name": "Rapid Login Attempts",
          "description": "Test rate limiting by making rapid login requests",
          "request": {
            "method": "POST",
            "url": "{{baseUrl}}{{apiEndpoint}}/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{invalidUsername}}\",\n  \"password\": \"{{invalidPassword}}\"\n}"
            }
          },
          "test": [
            "// This test should be run in a loop with a runner",
            "pm.test('After multiple rapid requests, rate limiting should be applied', function() {",
            "  if (pm.iterationData.get('iteration') >= 10) {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 429]);",
            "    if (pm.response.code === 429) {",
            "      pm.expect(pm.response.headers.get('Retry-After')).to.exist;",
            "    }",
            "  }",
            "});"
          ]
        }
      ]
    }
  ]
}