name: IMS Test Suite

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: false
        type: boolean
      run_e2e_tests:
        description: 'Run end-to-end tests'
        required: false
        default: false
        type: boolean
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean
      run_security_tests:
        description: 'Run security tests'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: 17
  NODE_VERSION: 18
  GRADLE_VERSION: 8.1
  TEST_RESULTS_DIR: test-results

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./src/backend/gradlew

      - name: Run backend unit tests
        working-directory: ./src/backend
        run: ./gradlew test jacocoTestReport

      - name: Check backend code coverage
        working-directory: ./src/backend
        run: ./gradlew jacocoTestCoverageVerification

      - name: Install frontend dependencies
        working-directory: ./src/web
        run: npm ci

      - name: Run frontend unit tests
        working-directory: ./src/web
        run: npm test -- --coverage --watchAll=false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            src/backend/**/build/test-results/**/*.xml
            src/web/junit.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            src/backend/**/build/reports/jacoco/**
            src/web/coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' || github.event_name == 'schedule' || inputs.run_integration_tests == true
    services:
      postgres:
        image: postgres:15.3
        env:
          POSTGRES_USER: ims_test
          POSTGRES_PASSWORD: ims_test
          POSTGRES_DB: ims_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
          - 9092:9092

      zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/test/integration/package-lock.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./src/backend/gradlew

      - name: Run backend integration tests
        working-directory: ./src/backend
        run: ./gradlew integrationTest

      - name: Install integration test dependencies
        working-directory: ./src/test/integration
        run: npm ci

      - name: Run API integration tests
        working-directory: ./src/test/integration
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            src/backend/**/build/test-results/integrationTest/**/*.xml
            src/test/integration/reports/**

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'schedule' || inputs.run_e2e_tests == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build test environment
        run: docker-compose -f src/test/docker/compose-test.yml up -d

      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: src/test/e2e
          config-file: cypress.config.ts
          browser: chrome
          record: false

      - name: Set up Playwright
        uses: microsoft/playwright-github-action@v1

      - name: Install Playwright dependencies
        working-directory: ./src/test/e2e/playwright
        run: npm ci

      - name: Run Playwright tests
        working-directory: ./src/test/e2e/playwright
        run: npx playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            src/test/e2e/cypress/videos
            src/test/e2e/cypress/screenshots
            src/test/e2e/cypress/results
            src/test/e2e/playwright-report

      - name: Tear down test environment
        if: always()
        run: docker-compose -f src/test/docker/compose-test.yml down

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'schedule' || inputs.run_performance_tests == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build test environment
        run: docker-compose -f src/test/docker/compose-test.yml up -d

      - name: Run k6 performance tests - Locate Approval
        uses: grafana/k6-action@v0.2.0
        with:
          filename: src/test/performance/k6/scenarios/locateApproval.js

      - name: Run k6 performance tests - Short Sell Validation
        uses: grafana/k6-action@v0.2.0
        with:
          filename: src/test/performance/k6/scenarios/shortSellValidation.js

      - name: Run k6 performance tests - Position Calculation
        uses: grafana/k6-action@v0.2.0
        with:
          filename: src/test/performance/k6/scenarios/positionCalculation.js

      - name: Run k6 performance tests - Inventory Calculation
        uses: grafana/k6-action@v0.2.0
        with:
          filename: src/test/performance/k6/scenarios/inventoryCalculation.js

      - name: Run k6 performance tests - Data Ingestion
        uses: grafana/k6-action@v0.2.0
        with:
          filename: src/test/performance/k6/scenarios/dataIngestion.js

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: src/test/performance/results

      - name: Tear down test environment
        if: always()
        run: docker-compose -f src/test/docker/compose-test.yml down

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'schedule' || inputs.run_security_tests == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      - name: Grant execute permission for gradlew
        run: chmod +x ./src/backend/gradlew

      - name: Run OWASP Dependency Check
        working-directory: ./src/backend
        run: ./gradlew dependencyCheckAggregate

      - name: Install frontend dependencies
        working-directory: ./src/web
        run: npm ci

      - name: Run npm audit
        working-directory: ./src/web
        run: npm audit --production

      - name: Set up ZAP
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://dev-api.example.com'
          rules_file_name: 'src/test/security/zap/rules.conf'
          cmd_options: '-a'

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            src/backend/build/reports/dependency-check-report.html
            src/web/npm-audit.json
            src/test/security/zap/zap-report.html