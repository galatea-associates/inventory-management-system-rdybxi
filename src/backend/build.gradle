buildscript {
    ext {
        springBootVersion = '3.1.4'
        springDependencyManagementVersion = '1.1.7'
        dockerPluginVersion = '0.35.0'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
        classpath "com.palantir.gradle.docker:gradle-docker:${dockerPluginVersion}"
    }
}

plugins {
    id 'java'
    id 'checkstyle'
//    id 'com.github.spotbugs' version '5.0.14'
    id 'jacoco'
//    id 'com.diffplug.spotless' version '6.18.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'org.springframework.boot' version '3.1.4' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
    id 'com.palantir.docker' version '0.35.0' apply false
}

allprojects {
    group = 'com.ims'
    version = '0.1.0-SNAPSHOT'
    
    apply plugin: 'java'
    apply plugin: 'checkstyle'
//    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
//    apply plugin: 'com.diffplug.spotless'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.palantir.docker'

    ext {
        springCloudVersion = '2022.0.2'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        
        withSourcesJar()
        withJavadocJar()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'
        implementation 'org.springframework.kafka:spring-kafka:3.0.7'
        implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.0.2'
        implementation 'com.hazelcast:hazelcast:5.3.0'
        implementation 'org.eclipse.collections:eclipse-collections:11.1.0'
        implementation 'com.lmax:disruptor:3.4.4'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.3'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2'
        
        compileOnly 'org.projectlombok:lombok:1.18.30'
//        compileOnly 'com.github.spotbugs:spotbugs-annotations:5.0.14'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
        testImplementation 'org.mockito:mockito-core:4.5.1'
        testImplementation 'org.springframework.kafka:spring-kafka-test:3.0.5'
        testImplementation 'org.assertj:assertj-core:3.24.2'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }

    jacoco {
        toolVersion = '0.8.10'
    }
    
    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
        
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    "**/config/**",
                    "**/model/**",
                    "**/dto/**",
                    "**/entity/**",
                    "**/Application.class"
                ])
            }))
        }
    }
    
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.85
                }
            }
            rule {
                enabled = true
                element = 'CLASS'
                includes = ['**/calculation/**']
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 1.0
                }
            }
        }
    }
    
    checkstyle {
        toolVersion = '10.10.0'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [
            'checkstyle.suppressions.file': rootProject.file('config/checkstyle/suppressions.xml')
        ]
        maxWarnings = 0
        maxErrors = 0
    }
    
//    spotbugs {
//        toolVersion = '5.0.14'
//        effort = 'max'
//        reportLevel = 'high'
//        excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
//    }
//
//    spotbugsMain {
//        reports {
//            html.required = true
//            xml.required = false
//        }
//    }
    
//    spotless {
//        java {
//            importOrder('java', 'javax', 'jakarta', 'org', 'com', '')
//            removeUnusedImports()
//            trimTrailingWhitespace()
//            indentWithSpaces(4)
//            endWithNewline()
////            licenseHeaderFile rootProject.file('config/spotless/license-header.txt')
//        }
//    }
    
    sonarqube {
        properties {
            property 'sonar.projectKey', "${project.group}:${project.name}"
            property 'sonar.projectName', "${project.name}"
            property 'sonar.sources', 'src/main/java'
            property 'sonar.tests', 'src/test/java'
            property 'sonar.java.coveragePlugin', 'jacoco'
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            property 'sonar.java.checkstyle.reportPaths', "${buildDir}/reports/checkstyle/main.xml"
//            property 'sonar.java.spotbugs.reportPaths', "${buildDir}/reports/spotbugs/main.html"
        }
    }

    docker {
        name "${project.group}/${project.name}:${project.version}"
        tags 'latest'
        dockerfile file('Dockerfile')
        buildArgs([
                APP_NAME: project.name,
                APP_VERSION: project.version
        ])
        files tasks.bootJar.outputs.files
    }
}