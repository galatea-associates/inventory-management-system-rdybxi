# ============================================
# Production Configuration for Calculation Service
# ============================================

spring:
  # Database configuration - using environment variables for sensitive information
  datasource:
    url: ${DB_URL:jdbc:postgresql://ims-db-prod.example.com:5432/ims_calculation}
    username: ${DB_USERNAME:ims_prod}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 20
      maximum-pool-size: 50
      connection-timeout: 10000
      max-lifetime: 1800000
      idle-timeout: 600000
  
  # JPA configuration - optimized for production
  jpa:
    hibernate:
      ddl-auto: validate  # Only validate schema, never create/update in production
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc.batch_size: 100  # Increased batch size for higher throughput
        order_inserts: true
        order_updates: true
  
  # Kafka configuration - optimized for high throughput
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-prod-1.example.com:9092,kafka-prod-2.example.com:9092,kafka-prod-3.example.com:9092}
    consumer:
      group-id: ${KAFKA_GROUP_ID:calculation-service-prod}
      auto-offset-reset: earliest
      enable-auto-commit: false
      isolation-level: read_committed
      max-poll-records: 1000  # Increased for higher throughput
      fetch-min-bytes: 2048   # Increased for better batching
      fetch-max-wait-ms: 300  # Reduced for lower latency
    producer:
      acks: all  # Ensure durability of writes
      retries: 10
      batch-size: 32768       # Increased for better throughput
      buffer-memory: 67108864 # Increased for handling higher volumes
      linger-ms: 5
      compression-type: snappy
    topics:
      position-event: ${KAFKA_TOPIC_POSITION_EVENT:position-events}
      inventory-event: ${KAFKA_TOPIC_INVENTORY_EVENT:inventory-events}
      market-data-event: ${KAFKA_TOPIC_MARKET_DATA_EVENT:market-data-events}
      workflow-event: ${KAFKA_TOPIC_WORKFLOW_EVENT:workflow-events}
    listener:
      concurrency: 10  # Increased concurrency for higher throughput
      ack-mode: MANUAL_IMMEDIATE
  
  # Hazelcast distributed cache configuration - production settings
  hazelcast:
    cluster-name: ${HAZELCAST_CLUSTER_NAME:ims-calculation-cluster}
    instance-name: ${HAZELCAST_INSTANCE_NAME:calculation-service}
    multicast-enabled: false  # Use TCP-IP for production reliability
    tcp-ip-members: ${HAZELCAST_TCP_IP_MEMBERS:hazelcast-prod-1.example.com,hazelcast-prod-2.example.com,hazelcast-prod-3.example.com}
    port: 5701
    backup-count: 2  # Increased backup count for better resilience
    position-map-ttl-seconds: 3600
    inventory-map-ttl-seconds: 1800
    rule-map-ttl-seconds: 7200
    max-size-per-node: 20000  # Increased capacity for production workloads
  
  # Security configuration - production settings
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:https://auth.example.com/}
          audience: ${JWT_AUDIENCE:ims-api}
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:https://ims.example.com}  # Only secure origins in production
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: Authorization,Content-Type,X-Requested-With,Accept
      allow-credentials: true
      max-age: 3600
  
  # Cache configuration - increased size for production
  cache:
    caffeine:
      spec: maximumSize=20000,expireAfterWrite=1h
  
  # Service discovery - enabled in production
  cloud:
    discovery:
      enabled: true

# Server configuration - optimized for production
server:
  port: ${SERVER_PORT:8082}
  tomcat:
    max-threads: 400  # Increased for higher concurrency
    min-spare-threads: 40
    max-connections: 20000  # Increased for higher connection loads
    connection-timeout: 10000
    accept-count: 500  # Increased for handling connection spikes
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 2048

# Management endpoints (actuator) - production settings
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus  # Limited set of endpoints for security
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized  # Only show details to authenticated users
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      application: ${spring.application.name}
      environment: production  # Tag all metrics with environment

# Logging configuration - production settings
logging:
  level:
    root: INFO
    com.ims: ${LOG_LEVEL:INFO}
    org.springframework: WARN  # Reduced logging for frameworks
    org.hibernate: WARN        # Reduced logging for frameworks
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/ims/calculation-service.log  # Path for production logs
    max-size: 100MB
    max-history: 30  # Keep more logs in production

# Calculation service specific configuration - production settings
calculation:
  position:
    cache-enabled: true
    cache-ttl-seconds: 3600
  inventory:
    cache-enabled: true
    cache-ttl-seconds: 1800
  limit:
    cache-enabled: true
    cache-ttl-seconds: 1800
  rule:
    cache-enabled: true
    cache-ttl-seconds: 7200
  performance:
    thread-pool-size: 40  # Increased for higher throughput
    queue-capacity: 1000  # Increased for handling request spikes

# Resilience4j circuit breaker and retry configuration - production settings
resilience4j:
  circuitbreaker:
    instances:
      positionCalculation:
        registerHealthIndicator: true
        slidingWindowSize: 200  # Increased for more accurate failure detection
        minimumNumberOfCalls: 20
        permittedNumberOfCallsInHalfOpenState: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
      inventoryCalculation:
        registerHealthIndicator: true
        slidingWindowSize: 200
        minimumNumberOfCalls: 20
        permittedNumberOfCallsInHalfOpenState: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
  retry:
    instances:
      positionCalculation:
        maxAttempts: 5  # Increased for production reliability
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      inventoryCalculation:
        maxAttempts: 5
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

# SpringDoc OpenAPI documentation configuration - disabled in production
springdoc:
  swagger-ui:
    enabled: false  # Disabled in production for security
  api-docs:
    enabled: false  # Disabled in production for security