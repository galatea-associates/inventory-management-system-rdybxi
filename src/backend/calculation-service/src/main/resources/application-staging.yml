# ============================================
# Staging Environment Configuration for Calculation Service
# ============================================

spring:
  # Database configuration for staging
  datasource:
    url: ${DB_URL:jdbc:postgresql://ims-db-staging.example.com:5432/ims_calculation}
    username: ${DB_USERNAME:ims_staging}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 15
      maximum-pool-size: 30
      connection-timeout: 15000
      max-lifetime: 1800000
      idle-timeout: 600000
  
  # JPA configuration for staging
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc.batch_size: 50
        order_inserts: true
        order_updates: true
  
  # Kafka configuration - optimized for staging throughput
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-staging-1.example.com:9092,kafka-staging-2.example.com:9092}
    consumer:
      group-id: ${KAFKA_GROUP_ID:calculation-service-staging}
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 500
      fetch-min-bytes: 1024
      fetch-max-wait-ms: 500
    producer:
      acks: all
      retries: 5
      batch-size: 16384
      buffer-memory: 33554432
      linger-ms: 5
      compression-type: snappy
    topics:
      position-event: ${KAFKA_TOPIC_POSITION_EVENT:position-events-staging}
      inventory-event: ${KAFKA_TOPIC_INVENTORY_EVENT:inventory-events-staging}
      market-data-event: ${KAFKA_TOPIC_MARKET_DATA_EVENT:market-data-events-staging}
      workflow-event: ${KAFKA_TOPIC_WORKFLOW_EVENT:workflow-events-staging}
    listener:
      concurrency: 5
  
  # Hazelcast distributed cache configuration for staging
  hazelcast:
    cluster-name: ${HAZELCAST_CLUSTER_NAME:ims-calculation-cluster-staging}
    instance-name: ${HAZELCAST_INSTANCE_NAME:calculation-service-staging}
    multicast-enabled: false
    tcp-ip-members: ${HAZELCAST_TCP_IP_MEMBERS:hazelcast-staging-1.example.com,hazelcast-staging-2.example.com}
    port: 5701
    backup-count: 1
    position-map-ttl-seconds: 3600
    inventory-map-ttl-seconds: 1800
    rule-map-ttl-seconds: 7200
    max-size-per-node: 10000
  
  # Security configuration for staging
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:https://auth-staging.example.com/}
          audience: ${JWT_AUDIENCE:ims-api-staging}
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:https://ims-staging.example.com}
  
  # Cache configuration for staging
  cache:
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=1h

# Server configuration for staging
server:
  port: ${SERVER_PORT:8082}
  tomcat:
    max-threads: 200
    min-spare-threads: 20
    max-connections: 10000
    connection-timeout: 20000
    accept-count: 200
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 2048

# Management endpoints configuration for staging
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true

# Logging configuration for staging
logging:
  level:
    root: INFO
    com.ims: ${LOG_LEVEL:INFO}
    org.springframework: INFO
    org.hibernate: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Calculation service specific configuration for staging
calculation:
  position:
    cache-enabled: true
    cache-ttl-seconds: 3600
  inventory:
    cache-enabled: true
    cache-ttl-seconds: 1800
  limit:
    cache-enabled: true
    cache-ttl-seconds: 1800
  rule:
    cache-enabled: true
    cache-ttl-seconds: 7200
  performance:
    thread-pool-size: 20
    queue-capacity: 500

# Resilience4j circuit breaker and retry configuration for staging
resilience4j:
  circuitbreaker:
    instances:
      positionCalculation:
        registerHealthIndicator: true
        slidingWindowSize: 100
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
      inventoryCalculation:
        registerHealthIndicator: true
        slidingWindowSize: 100
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
  retry:
    instances:
      positionCalculation:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      inventoryCalculation:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

# SpringDoc OpenAPI documentation configuration for staging
springdoc:
  swagger-ui:
    enabled: true
  api-docs:
    enabled: true
  packages-to-scan: com.ims.calculation.controller
  paths-to-match: /api/**