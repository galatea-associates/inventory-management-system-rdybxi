plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.palantir.docker'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.0.1'
}

group = 'com.ims.workflow'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {
    implementation project(':common-lib')
    
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter:7.22.0'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.22.0'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:7.22.0'
    
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'com.h2database:h2'
}

bootJar {
    mainClass.set('com.ims.workflow.WorkflowServiceApplication')
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-By': System.properties['user.name'],
            'Built-Date': new Date(),
            'Built-JDK': System.properties['java.version']
        )
    }
}

docker {
    name "ims/workflow-service:${project.version}"
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
    files bootJar.archiveFile
    labels(['maintainer': 'IMS Team <ims-team@example.com>'])
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    systemProperty 'spring.profiles.active', 'test'
    
    environment = [
        'KAFKA_BOOTSTRAP_SERVERS': 'localhost:9092',
        'DB_HOST': 'localhost',
        'DB_PORT': '5432',
        'DB_NAME': 'ims_test',
        'DB_USERNAME': 'test',
        'DB_PASSWORD': 'test'
    ]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

def jvmArgs = [
    '-Xms1g',
    '-Xmx2g',
    '-XX:+UseG1GC',
    '-XX:MaxGCPauseMillis=100',
    '-XX:+UseStringDeduplication'
]

application {
    applicationDefaultJvmArgs = [
            '-Dspring.profiles.active=default',
            '-Dserver.port=8084',
            '-Dmanagement.server.port=8085'
    ] + jvmArgs
}

test.jvmArgs jvmArgs